<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Reduce code zize</title>
    <link href="/2022/09/16/reduce-code-size/"/>
    <url>/2022/09/16/reduce-code-size/</url>
    
    <content type="html"><![CDATA[<h2 id="Why-should-reduce-code-size"><a href="#Why-should-reduce-code-size" class="headerlink" title="Why should reduce code size?"></a>Why should reduce code size?</h2><ol><li>Size limit from distribution platform, for example, Googel Play, apk limit size is 100MB.</li><li>Improve program performance, lower memory and disk usage.</li><li>Reduce costs of customer acquisition, smaller app size, higher the user conversion rate.</li></ol><p><img src="/user_conversion_rate.jpg"></p><h2 id="How-to-reduce-code-size"><a href="#How-to-reduce-code-size" class="headerlink" title="How to reduce code size?"></a>How to reduce code size?</h2><p>This article descriptes how to reduce size of android dynamic library and iOS link-map.</p><h3 id="Packaging-on-depends"><a href="#Packaging-on-depends" class="headerlink" title="Packaging on depends"></a>Packaging on depends</h3><p>Your app or SDK has a lot of functions, customers only need some of these features, packaging app&#x2F;SDK as needed is necessary. Like most open source projects, configuration file determines which modules need to be compiled and linked. Module boundaries must be clear, code must be low coupled. Here show how to configure porject file:<br>iOS: <a href="https://github.com/kronenthaler/mod-pbxproj">https://github.com/kronenthaler/mod-pbxproj</a>, .pch file is easy way to define macro.<br>Android: Application.mk, <a href="https://developer.android.com/ndk/guides/application_mk">https://developer.android.com/ndk/guides/application_mk</a>, APP_xxx is more convenient compared to LOCAL_XXX.<br>Windows: <a href="https://github.com/marktsuchida/vcxproj-stream-editor">https://github.com/marktsuchida/vcxproj-stream-editor</a>, vcxproj is xml file, you can use python script to parse and replace.</p><p>For example, </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">## Application.mk </span><br>IS_SUPPORT_AAC :=<span class="hljs-literal">false</span><br><br><span class="hljs-title function_ invoke__">ifeq</span> ($(IS_SUPPORT_AAC),<span class="hljs-literal">true</span>)<br>APP_CFLAGS += -DAV_USE_AAC_CODEC<br><span class="hljs-keyword">endif</span><br><br><br><span class="hljs-comment">## Android.mk of Engine module</span><br><span class="hljs-title function_ invoke__">ifeq</span> ($(IS_SUPPORT_AAC),<span class="hljs-literal">true</span>)<br>LOCAL_STATIC_LIBRARIES += libaac<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-title function_ invoke__">ifeq</span> ($(IS_SUPPORT_AAC),<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">include</span> $(ENGINE_SRC_PATH)/<span class="hljs-number">3</span>rd/audiocodec/libaacplus/build/Android/Android.mk<br><span class="hljs-keyword">endif</span><br><br><br><span class="hljs-comment">## Decode.cpp</span><br><span class="hljs-comment">#ifdef AV_USE_AAC_CODEC</span><br><span class="hljs-comment">/*5*/</span>&#123;<span class="hljs-number">48000</span>, <span class="hljs-number">2</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>*<span class="hljs-number">10000</span>, PAR_TYPE_EAACPLUS_AUDIO, AUTOENC_RATE_EAACP_SSWB_ST, AUTOENC_STEREO_MODE_ST, <span class="hljs-title class_">CEAACPLUSEnc</span>::<span class="hljs-variable constant_">CreateEnc</span>, <span class="hljs-title class_">CEAACPLUSEnc</span>::<span class="hljs-variable constant_">CalcOutBufSize</span>&#125;,<br><span class="hljs-comment">/*6*/</span>&#123;<span class="hljs-number">48000</span>, <span class="hljs-number">2</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>*<span class="hljs-number">10000</span>, PAR_TYPE_EAACPLUS_AUDIO, AUTOENC_RATE_EAACP_SSSWB_ST, AUTOENC_STEREO_MODE_ST, <span class="hljs-title class_">CEAACPLUSEnc</span>::<span class="hljs-variable constant_">CreateEnc</span>, <span class="hljs-title class_">CEAACPLUSEnc</span>::<span class="hljs-variable constant_">CalcOutBufSize</span>&#125;,<br><span class="hljs-comment">#else</span><br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>&#125;,<br>            &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>&#125;,<br><span class="hljs-comment">#endif</span><br></code></pre></td></tr></table></figure><h3 id="–gc-section"><a href="#–gc-section" class="headerlink" title="–gc-section"></a>–gc-section</h3><p><a href="https://gcc.gnu.org/onlinedocs/gnat_ugn/Compilation-options.html">gc-section</a>,the operation of eliminating the unused code and data from the final executable is directly performed by the linker.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">## Application.mk </span><br>IS_ENABLE_GC_SECTION :=true<br><br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(IS_ENABLE_GC_SECTION)</span>, true)<br>APP_CPPFLAGS += -ffunction-sections -fdata-sections<br>APP_CFLAGS += -ffunction-sections -fdata-sections<br>APP_LDFLAGS += -Wl,--gc-sections<br><span class="hljs-keyword">endif</span><br></code></pre></td></tr></table></figure><h3 id="Clipping-symbols-exported"><a href="#Clipping-symbols-exported" class="headerlink" title="Clipping symbols exported"></a>Clipping symbols exported</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">## Application.mk </span><br><span class="hljs-attribute">APP_LDFLAGS</span> += -Wl,--exclude-libs,<span class="hljs-literal">ALL</span><br></code></pre></td></tr></table></figure><p><a href="https://linux.die.net/man/1/ld">–exclude-libs</a> make all symbols in static library not exported. if you want to customize the export symbol table, <a href="https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html">version script</a> is helpful.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stata">## version_script.<span class="hljs-keyword">conf</span><br>LIBFOO_1.0 &#123;<br>  <span class="hljs-keyword">global</span>:<br>    func1; func2; func3;...<br><br>  <span class="hljs-keyword">local</span>:<br><span class="hljs-comment">    *;</span><br>&#125;;<br><br>## Application.mk <br><span class="hljs-keyword">if</span> HAVE_LD_VERSION_SCRIPT<br>APP_LDFLAGS += -Wl,--<span class="hljs-keyword">version</span>-script=$(srcdir)/version_script.<span class="hljs-keyword">conf</span><br>endif<br></code></pre></td></tr></table></figure><h3 id="LTO-Link-time-optimize"><a href="#LTO-Link-time-optimize" class="headerlink" title="LTO(Link-time optimize)"></a>LTO(Link-time optimize)</h3><p>The basic principle behind <a href="(https://gcc.gnu.org/onlinedocs/gcc-4.6.3/gccint/LTO.html)">LTO</a> is that some optimization passes are pushed back to the linking stage. Why the linking stage? Because that is the point in the pipeline where the entire program (i.e. the whole set of compilation units) is available at once and thus optimizations across compilation unit boundaries become possible.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">## Application.mk </span><br>IS_ENABLE_LTO :=true<br><br><span class="hljs-comment">## Android.mk of module </span><br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(IS_ENABLE_LTO)</span>, true)<br><span class="hljs-keyword">ifneq</span> (,<span class="hljs-variable">$(<span class="hljs-built_in">filter</span> <span class="hljs-variable">$(TARGET_ARCH_ABI)</span>,x86 arm64-v8a x86_64)</span>)<br><span class="hljs-variable">$(<span class="hljs-built_in">warning</span> &quot;<span class="hljs-variable">$(TARGET_ARCH_ABI)</span> enable lto&quot;)</span><br>LOCAL_CPPFLAGS += -flto=thin<br>LOCAL_CFLAGS += -flto=thin<br><span class="hljs-keyword">endif</span><br><span class="hljs-keyword">endif</span><br></code></pre></td></tr></table></figure><p>After LTO enabled, smaller code size and higher performance. But, slower link speed and poorer debug ability.</p><h3 id="Exception-RTTI-Oz"><a href="#Exception-RTTI-Oz" class="headerlink" title="Exception\RTTI\-Oz"></a>Exception\RTTI\-Oz</h3><p>C++ lauguage supports exception and RTTI(Runtime Type Identification), if your project does’t use them, please disable them. </p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">## Application.mk </span><br>IS_ENABLE_EXCPTION :=false<br>IS_ENABLE_RTTI :=false<br><br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(IS_ENABLE_EXCPTION)</span>, true)<br>APP_CPPFLAGS += -fexceptions<br>APP_CFLAGS += -DAV_SUPPORT_EXCEPTION<br><span class="hljs-keyword">else</span><br>APP_CPPFLAGS += -fno-exceptions<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(IS_ENABLE_RTTI)</span>, true)<br>APP_CPPFLAGS += -frtti<br>APP_CFLAGS += -DAV_SUPPORT_RTTI<br><span class="hljs-keyword">else</span><br>APP_CPPFLAGS += -fno-rtti<br><span class="hljs-keyword">endif</span><br></code></pre></td></tr></table></figure><p><a href="https://clang.llvm.org/docs/CommandGuide/clang.html">Code Generation Options</a>,<br>-O0: no optimization, generates the most debuggable code.<br>-O1: Somewhere between -O0 and -O2.<br>-O2: Moderate level of optimization which enables most optimizations.<br>…<br>-Os Like -O2 with extra optimizations to reduce code size.<br>-Oz Like -Os (and thus -O2), but reduces code size further.</p><p>-Oz generate smaller code size that -Os, but slight and acceptable performance penalty. If -Oz is set, need to do adequate performance test.</p><h3 id="Resuorces"><a href="#Resuorces" class="headerlink" title="Resuorces"></a>Resuorces</h3><p>The resources the code depending on can be download from remote server or CDN, therefor, Digging resources out of code can also reduce code size. For example, Algorithm Model and String.</p><p>Stripping log strings as example, here is the steps:<br>Firstly, Using python script to strip log string from code before compiling, save the striped strings as a resource file, <a href="#appendix">ptyhon script</a>.<br>And secondly, After SDK or module is loaded,  try to load string resource file from local disk, if it is not exist, download it from remote.</p><p>The <strong>benefits</strong>:</p><ol><li>Size of the code is reduced;</li><li>Not all the businesses need print log;</li><li>More secure, logs is an important way to reverse engineering;</li><li>More easier to achieve internationalization.</li></ol><p>The code of logging before string stripping:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">std::<span class="hljs-built_in">string</span> str = ...;<br><span class="hljs-constructor">LOG_I(<span class="hljs-string">&quot;here is a string, len=%d&quot;</span>, <span class="hljs-params">str</span>.<span class="hljs-params">length</span>()</span>);<br></code></pre></td></tr></table></figure><p>The code of logging after string stripping:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> str = ...;<br>LOG_I(STRING_MAPPING(<span class="hljs-number">2</span>), str.<span class="hljs-built_in">length</span>());<br></code></pre></td></tr></table></figure><p>The resource file of the string, rc4 encryption.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">1,U2FsdGVkX1+7pwfzVJ/n6WFScsqrrk7D6aLJKlE=<br>2,U2FsdGVkX19Zmw0mG74+hNNfbZpLbrfdgp+dhx8kdQ9R3hTDjVqdkQ==<br>3,U2FsdGVkX1+7pwfzVJ/n6WFScsqrrk7D6aLJKlE=<br>...<br></code></pre></td></tr></table></figure><h3 id="Lightweight-implementation"><a href="#Lightweight-implementation" class="headerlink" title="Lightweight implementation"></a>Lightweight implementation</h3><ol><li>Avoid using C++ STL, expecially std::ostringstream;</li><li>C language open source has a higher priority, cJson&#x2F;protobuf-c&#x2F;… rather than rapidjson&#x2F;protobuf-c++&#x2F;…;</li><li>Call directly, donot overwrap, open source like ffmpeg&#x2F;webrtc are too huge, Donot use an ox-cleaver to kill a chicken.</li></ol><p>Data serialization for example, <a href="https://developers.google.com/protocol-buffers">protobuf</a> is used a lot, code size has two parts, one part is library, another part is generated cpp proto files. </p><p>If your project doesn’t using reflection, protobuf-lite is better chooise.<br><img src="/protobuf-lib.png"><br><img src="/protobuf-gen-code-cpp.png"></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">## proto file<br><span class="hljs-keyword">option</span> optimize_for = LITE_RUNTIME; # add in the first line<br><span class="hljs-keyword">message </span><span class="hljs-title class_">VoipClient2AccessHead</span><br>&#123;<br><span class="hljs-keyword">optional</span> <span class="hljs-type">uint32</span> cmdtype = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">optional</span> <span class="hljs-type">uint32</span> version = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">optional</span> <span class="hljs-type">uint64</span> roomid = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">optional</span> <span class="hljs-type">uint32</span> memberid = <span class="hljs-number">4</span>;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>With protobuf-lite, Code size is significantly reduced, especially libarary size, the point is not to change your code. If your project has a amount of proto files, <a href="https://github.com/protobuf-c/protobuf-c">protobuf-c</a> is better chooise.<br><img src="/proto-c.png"><br><img src="/proto-c-gen.png"></p><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/python3</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br>import sys<br>import os<br>import os.path<br><br>fileList = []<br>filter = &#123;<span class="hljs-string">&#x27;.cpp&#x27;</span>,<span class="hljs-string">&#x27;.c&#x27;</span>,<span class="hljs-string">&#x27;.cxx&#x27;</span>,<span class="hljs-string">&#x27;.C&#x27;</span>,<span class="hljs-string">&#x27;.h&#x27;</span>,<span class="hljs-string">&#x27;.hpp&#x27;</span>,<span class="hljs-string">&#x27;.hxx&#x27;</span>&#125; <span class="hljs-comment"># suffix of code file</span><br>prefix_filter = &#123;<span class="hljs-string">&#x27;LOG_&#x27;</span>,<span class="hljs-string">&#x27;Q_&#x27;</span>&#125; <span class="hljs-comment"># prefix of the print-log-function</span><br>index_string_macro = <span class="hljs-string">&quot;STRING_MAPPING&quot;</span> <span class="hljs-comment"># Macro name to mapping int to string</span><br><br>string_resource_index = 0<br>string_resource_map = &#123;&#125;<br><br>def pack_string(str):<br>    global string_resource_index<br>    global string_resource_map <br>    <span class="hljs-keyword">if</span> str not <span class="hljs-keyword">in</span> string_resource_map:<br>        string_resource_map[str] = string_resource_index<br>        string_resource_index += 1<br>    <span class="hljs-built_in">return</span> string_resource_map[str]<br>    <br>def find_string_from_line(in_line,out_line):<br>    begin = in_line.find(<span class="hljs-string">&#x27;&quot;&#x27;</span>)<br>    end = -1<br>    <span class="hljs-keyword">if</span> begin &gt;= 0:<br>        end = in_line.find(<span class="hljs-string">&#x27;&quot;&#x27;</span>,begin+1)<br>        <span class="hljs-keyword">while</span> end &gt; 0:<br>            <span class="hljs-comment">#case like &quot;xxxx\&quot;xxx\&quot;xxx&quot;</span><br>            <span class="hljs-keyword">if</span> in_line[end-1] == <span class="hljs-string">&#x27;\\&#x27;</span>:<br>                end = in_line.find(<span class="hljs-string">&#x27;&quot;&#x27;</span>,end+1)<br>                <span class="hljs-built_in">continue</span><br>            <span class="hljs-built_in">break</span><br>        <span class="hljs-comment">#case no string</span><br>        <span class="hljs-keyword">if</span> end &lt; 0:<br>            out_line += in_line<br>            <span class="hljs-comment">#print &quot;if end &lt; 0&quot;</span><br>            <span class="hljs-built_in">return</span> out_line<br>        <span class="hljs-comment">#case like &quot;xxxx&quot;</span><br>        <span class="hljs-keyword">elif</span> end &gt; begin+1:<br>            <span class="hljs-comment">#print &quot;end &gt; begin+1&quot;</span><br>            <span class="hljs-comment">#print in_line[begin:end+1]</span><br>            out_line += in_line[0:begin]<br>            out_line += (index_string_macro + <span class="hljs-string">&quot;(&quot;</span> + str(pack_string(in_line[begin:end+1])) + <span class="hljs-string">&quot;)&quot;</span>)<br>        <span class="hljs-comment">#case like &quot;&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#print &quot;\&quot;\&quot;&quot;</span><br>            out_line += in_line[:end+1]<br>        out_line = find_string_from_line(in_line[end+1:],out_line)<br>    <span class="hljs-comment">#case no string</span><br>    <span class="hljs-keyword">else</span>:<br>        out_line += in_line<br>        <span class="hljs-comment">#print &quot;none&quot; </span><br>    <span class="hljs-comment">#print &quot;return:&quot; + out_line</span><br>    <span class="hljs-built_in">return</span> out_line<br>            <br>def collect_string_resource(in_line):<br>    <span class="hljs-comment">#print in_line</span><br>    <span class="hljs-keyword">for</span> prefix <span class="hljs-keyword">in</span> prefix_filter:<br>        <span class="hljs-keyword">if</span> in_line.find(prefix) &gt;=0:<br>            offset = in_line.find(prefix)<br>            <span class="hljs-keyword">if</span> offset &gt; 0 and in_line[offset-1] not <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;\t&#x27;</span>,<span class="hljs-string">&#x27;;&#x27;</span>&#125;:<br>                <span class="hljs-built_in">continue</span><br>            <span class="hljs-keyword">if</span> in_line.find(<span class="hljs-string">&#x27;(&#x27;</span>) == -1:<br>                <span class="hljs-built_in">break</span>;<br>            <span class="hljs-comment">#print in_line</span><br>            out_line = <span class="hljs-string">&quot;&quot;</span><br>            out_line = find_string_from_line(in_line,out_line)<br>            <span class="hljs-comment">#print &quot;collect_string_resource:&quot; +out_line</span><br>            <span class="hljs-built_in">return</span> out_line<br>    <span class="hljs-built_in">return</span> in_line<br>    <br>def filter_cpp_file(filepath):<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;filter_cpp_file:&quot;</span>+filepath<br>    write_buf = []<br>    try:<br>        f_in = open(filepath, mode = <span class="hljs-string">&#x27;rb&#x27;</span>)<br><br>        line = f_in.readline()<br>        slash_flag = 0<br>        <span class="hljs-keyword">while</span> line:<br>            <span class="hljs-comment">#line = line.split(&quot;\n&quot;)[0]</span><br>            <span class="hljs-keyword">if</span> line.find(<span class="hljs-string">&quot;//&quot;</span>) &gt;= 0:<br>                pos = line.find(<span class="hljs-string">&quot;//&quot;</span>)<br>                write_buf.append(collect_string_resource(line[0:pos]))<br>                write_buf.append(line[pos:])<br>            <span class="hljs-keyword">elif</span> line.find(<span class="hljs-string">&quot;/*&quot;</span>) &gt;= 0 and line.find(<span class="hljs-string">&quot;*/&quot;</span>) &gt;= 0: <br>                begin_pos = line.find(<span class="hljs-string">&quot;/*&quot;</span>)<br>                end_pos = line.find(<span class="hljs-string">&quot;*/&quot;</span>)<br>                write_buf.append(collect_string_resource(line[0:begin_pos]))<br>                write_buf.append(line[begin_pos:end_pos])<br>                write_buf.append(collect_string_resource(line[end_pos:]))<br>            <span class="hljs-keyword">elif</span> line.find(<span class="hljs-string">&quot;/*&quot;</span>) &gt;= 0:<br>                pos = line.find(<span class="hljs-string">&quot;/*&quot;</span>)<br>                write_buf.append(collect_string_resource(line[0:pos]))<br>                write_buf.append(line[pos:])<br>                slash_flag = 1<br>            <span class="hljs-keyword">elif</span> line.find(<span class="hljs-string">&quot;*/&quot;</span>) &gt;= 0:<br>                pos = line.find(<span class="hljs-string">&quot;*/&quot;</span>)<br>                write_buf.append(line[0:pos])<br>                write_buf.append(collect_string_resource(line[pos:]))<br>                slash_flag = 0<br>            <span class="hljs-keyword">elif</span> slash_flag == 1:<br>                write_buf.append(line)<br>                line = f_in.readline()<br>                <span class="hljs-built_in">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                write_buf.append(collect_string_resource(line))       <br>            line = f_in.readline()<br>        f_in.close()<br>    except Exception as e:<br>        <span class="hljs-built_in">print</span> e<br>        <br>    f_out= open(filepath,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> write_buf:<br>        f_out.write(line)<br>    f_out.close()<br>    <span class="hljs-built_in">return</span><br><br>def get_file_list(path):<br>    <span class="hljs-keyword">for</span> dirpath, dirnames, filenames <span class="hljs-keyword">in</span> os.walk(path):<br>        <span class="hljs-comment">#print &#x27;search path:&#x27;+dirpath</span><br>        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>            <span class="hljs-comment">#print &#x27;find file:&#x27;+filename</span><br>            <span class="hljs-keyword">if</span>(os.path.splitext(filename)[-1] <span class="hljs-keyword">in</span> filter):<br>                <span class="hljs-comment">#print os.path.join(dirpath, filename)</span><br>                fileList.append(os.path.join(dirpath, filename))<br>    <span class="hljs-built_in">return</span><br>    <br>def output_string_resource(filepath):<br>    global string_resource_map <br>    <span class="hljs-keyword">if</span> not string_resource_map:<br>        <span class="hljs-built_in">return</span><br>    f_out= open(filepath,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>    <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> string_resource_map.items():<br>        f_out.write(str(v)+<span class="hljs-string">&quot;:&quot;</span>+k+<span class="hljs-string">&quot;\n&quot;</span>)<br>    f_out.close()<br>    <span class="hljs-built_in">return</span><br>    <br>def main():<br>    arg_cnt = len(sys.argv)<br>    <span class="hljs-keyword">if</span> arg_cnt!=3:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;usage: \&quot;python pack_string_resource.py cpp_file_root_dir string_resource_file_path\&quot;&quot;</span><br>        <span class="hljs-built_in">return</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;cpp_file_root_dir:&quot;</span>+sys.argv[1]<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;string_resource_file_path:&quot;</span>+sys.argv[2]<br>    get_file_list(sys.argv[1])<br>    <span class="hljs-comment">#print fileList</span><br>    <span class="hljs-keyword">for</span> filepath <span class="hljs-keyword">in</span> fileList:<br>        filter_cpp_file(filepath)<br>    output_string_resource(sys.argv[2])<br>    <span class="hljs-built_in">return</span><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Thread dead loop -- auto variable</title>
    <link href="/2022/09/12/thread-dead-loop/"/>
    <url>/2022/09/12/thread-dead-loop/</url>
    
    <content type="html"><![CDATA[<p>When I was a student many years ago, the teacher described the difference between <strong>auto</strong> variables and <strong>volatile</strong> variables in detail. At that time, I thought it was just two keywords of C language, which were rarely used, so I didn’t pay much attention to them. With more and more work experience, I realized that these two ordinary guys have a lot of articles, and their existence means a contest between program <strong>performance</strong> and <strong>reliability</strong>.</p><h2 id="Problem-backgourd"><a href="#Problem-backgourd" class="headerlink" title="Problem backgourd"></a>Problem backgourd</h2><p>I am work at Tencent GVoice team since 2015. GVoice is voice-chat cross-platform SDK, serving 500+ games, 300 million active users. </p><p>Recently I found a strange problem, many users feedback that cannot open the microphone occasionally, <strong><font color="red">team members cannot hear his voice</font></strong>, but he can hear team members’ voice. </p><p>Allow me to introduce the steps to using voice-chat function: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.Join team room; <br>2.Open microphone and speaker; <br>3.The captured voice data is forwarded to other team members through the RTC server. <br></code></pre></td></tr></table></figure><h2 id="Problem-analysis"><a href="#Problem-analysis" class="headerlink" title="Problem analysis"></a>Problem analysis</h2><p>Cannot-Hearing is a common problem in RTC-over-voice application. In 2019, I designed a Full-link QoS system to locate the cause of these probloms. The idea is as below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.Tracing API Callings;<br>2.Tracing recording pipline(capture-&gt;resample-&gt;3A-&gt;mix-&gt;encode-&gt;pack-&gt;FEC-&gt;room-out);<br>3.Tracing voice data<span class="hljs-string">&#x27;s uplink, forwarding, and downlink;</span><br><span class="hljs-string">4.Tracing playing pipline(room-in-&gt;Dmx-&gt;deFEC-&gt;unpack-&gt;JB-&gt;decode-&gt;resample-&gt;mix-&gt;render).</span><br></code></pre></td></tr></table></figure><p>Through the Full-link QoS system, I located that <strong>the event of opening micphone was not processed by work thread, and the tick count of work thread is 0</strong>. so, was the work thread blocked or dead? This problom is set aside until opening LTO to optimize package size, aha, it was occurred again.</p><p>I dumped the thread call stack, found that the work thread run into loop code and cannot jump out. loop condition is a globle auto variable.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">SDK initialization call:<br>    int CEngine::<span class="hljs-function"><span class="hljs-title">StartEngine</span></span>()<br>    &#123;<br>    ...<br>        m_RecvProc.Start();<br>        m_thCapture.Start();<br>        m_thRender.Start();<br>        ...<br>        GetCtx()-&gt;bEngineStart = <span class="hljs-literal">true</span>;<br>        ...<br>    &#125;<br><br>Work thread call:<br>    int ThreadCapture::<span class="hljs-function"><span class="hljs-title">SysThreadProc</span></span>()<br>    &#123;<br>        ...<br>        //loop code to <span class="hljs-built_in">wait</span> the end of initialization<br>        <span class="hljs-keyword">while</span>(!GetCtx()-&gt;bEngineStart)<br>        &#123;<br>            SysSleep(5);<br>            <span class="hljs-built_in">continue</span>;<br>        &#125;<br>        //process cmd and task.<br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure><p>We known that thread sleeping will causes cache invalid. CPU cache will be update after next thread tick when initialize complete. The bad news is <strong>SysSleep function is empty implementation under Android platform</strong>, causes the cpu that assiciated work thead to run at 100%.</p><p>So, Why does this problem occur at low frequencies, but it inevitably happens when LTO is enabled? usually, user thread sets bEngineStart to ture firstly, and then work thread jumps over the loop code. But, if user thread is blocked a short time(Enalbe LTO), work thread has start up firstly, and bEngineStart is still false, although user thread will set it to true later, but work thread has no chance to update it from memory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">SDK initialization call:<br>    int CEngine::<span class="hljs-function"><span class="hljs-title">StartEngine</span></span>()<br>    &#123;<br>    ...<br>        m_RecvProc.Start();<br>        m_thCapture.Start();<br>        //!!!here blocked a short time<br>        m_thRender.Start();<br>        ...<br>        GetCtx()-&gt;bEngineStart = <span class="hljs-literal">true</span>;<br>        ...<br>    &#125;<br><br>Work thread call:<br>    int ThreadCapture::<span class="hljs-function"><span class="hljs-title">SysThreadProc</span></span>()<br>    &#123;<br>        ...<br>        //bEngineStart is always <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">while</span>(!GetCtx()-&gt;bEngineStart)<br>        &#123;<br>            SysSleep(5);<br>            <span class="hljs-built_in">continue</span>;<br>        &#125;<br>        //process cmd and task.<br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure><p>Therefore, user thread blocking and multiple threads switching will cause the above problem.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>SysSleep is an old version of thread sleeping implementation, new version Sleep function implementation is platform-wide, replace it with the new verion! </p><p>Of course, volatile variable can also solve this problem, for example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;windows.h&gt;</span><br><br>bool bRun = <span class="hljs-literal">false</span>;<br>DWORD WINAPI WorkThread(LPVOID param) &#123;<br>int nTick = 0;<br><span class="hljs-keyword">while</span> (!bRun) &#123;<br>++nTick;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tick %d\n&quot;</span>, nTick);<br><span class="hljs-built_in">return</span> 0L;<br>&#125;<br><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>()<br>&#123;<br>HANDLE h = CreateThread(NULL, 0L, WorkThread, 0L, 0L, NULL);<br>    //wait a short time, <br>    //let work thread startup firstly<br>Sleep(10);<br><span class="hljs-keyword">if</span> (h != INVALID_HANDLE_VALUE) &#123;<br>bRun = <span class="hljs-literal">true</span>;<br>CloseHandle(h);<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>The result of above program in <strong>debug</strong> mode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tick 11520226<br>Please press any key to <span class="hljs-built_in">continue</span>. . .<br></code></pre></td></tr></table></figure><p>The usual result in <strong>release</strong> mode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Please press any key to <span class="hljs-built_in">continue</span>. . .<br></code></pre></td></tr></table></figure><p>The rare result in <strong>release</strong> mode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tick 0<br>Please press any key to <span class="hljs-built_in">continue</span>. . .<br></code></pre></td></tr></table></figure><p>Assembly code in <strong>debug</strong> mode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">;virtual studio 2015 c++, debug ASM.<br>; 8    : DWORD WINAPI WorkThread(LPVOID param) &#123;<br>    push ebp<br>    mov ebp, esp<br>    push ecx<br>    mov DWORD PTR [ebp-4], -858993460 ; ccccccccH<br><br>; 9    : int nTick = 0;<br>    mov DWORD PTR _nTick$[ebp], 0<br><span class="hljs-variable">$LN2</span>@WorkThread:<br><br>; 10   : <span class="hljs-keyword">while</span> (!bRun) &#123;<br>    movzx eax, BYTE PTR ?bRun@@3_NA ; bRun<br>    <span class="hljs-built_in">test</span> eax, eax<br>    jne SHORT <span class="hljs-variable">$LN3</span>@WorkThread<br><br>; 11   : ++nTick;<br><br>    mov ecx, DWORD PTR _nTick$[ebp]<br>    add ecx, 1<br>    mov DWORD PTR _nTick$[ebp], ecx<br><br>; 12   : &#125;<br><br>    jmp SHORT <span class="hljs-variable">$LN2</span>@WorkThread<br><span class="hljs-variable">$LN3</span>@WorkThread:<br><br>; 13   : <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tick %d\n&quot;</span>, nTick);<br>    mov edx, DWORD PTR _nTick$[ebp]<br>    push edx<br>    push OFFSET <span class="hljs-variable">$SG85407</span><br>    call _printf<br>    add esp, 8<br><br>; 14   : <span class="hljs-built_in">return</span> 0L;<br>    xor eax, eax<br>; 15   : &#125;<br></code></pre></td></tr></table></figure><p>Assembly code in <strong>release</strong> mode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">;virtual studio 2015 c++, release ASM.<br>?WorkThread@@YGKPAX@Z PROC; WorkThread, COMDAT<br><br>; 9    : int nTick = 0;<br>; 10   : <span class="hljs-keyword">while</span> (!bRun) &#123;<br><br>cmpBYTE PTR ?bRun@@3_NA, 0; bRun<br>jneSHORT <span class="hljs-variable">$LN3</span>@WorkThread<br>npad7<br><span class="hljs-variable">$LL2</span>@WorkThread:<br>jmpSHORT <span class="hljs-variable">$LL2</span>@WorkThread<br><span class="hljs-variable">$LN3</span>@WorkThread:<br><br>; 11   : ++nTick;<br>; 12   : &#125;<br>; 13   : <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tick %d\n&quot;</span>, nTick);<br><br>push0<br>pushOFFSET ??_C@_08EAGMJAIH@tick?5?<span class="hljs-variable">$CFd</span>?6?<span class="hljs-variable">$AA</span>@<br>call_printf<br>addesp, 8<br><br>; 14   : <span class="hljs-built_in">return</span> 0L;<br><br>xoreax, eax<br><br>; 15   : &#125;<br></code></pre></td></tr></table></figure><p>“++nTick;” code is ignored in release mode, and while loop gonna to be dead loop if <code>bRun</code> is false at first, this is the compiler’s optimization behavior, <code>bRun</code>‘s writing operation in user thread is invisible to work thread, compiler <strong>instruction reordering</strong> happends in release mode(-O2 optimization).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. Instruction reordering will not reorder operations that having data dependencies.<br>2. Instruction reordering can guarantee the correctness <span class="hljs-keyword">in</span> a single thread, but <span class="hljs-keyword">in</span> a multi-threaded environment, may affect the results. <br></code></pre></td></tr></table></figure><p>Variable declared as <strong>volatile</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">volatile bool bRun = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>The result in <strong>release</strong> mode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tick 40011558<br>Please press any key to <span class="hljs-built_in">continue</span>. . .<br></code></pre></td></tr></table></figure><p>Assembly code of volatile version in <strong>release</strong> mode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">;virtual studio 2015 c++, release ASM.<br>?WorkThread@@YGKPAX@Z PROC; WorkThread, COMDAT<br><br>; 9    : int nTick = 0;<br><br>xoreax, eax<br><br>; 10   : <span class="hljs-keyword">while</span> (!bRun) &#123;<br><br>cmpBYTE PTR ?bRun@@3_NC, al; bRun<br>jneSHORT <span class="hljs-variable">$LN3</span>@WorkThread<br>npad6<br><span class="hljs-variable">$LL2</span>@WorkThread:<br><br>; 11   : ++nTick;<br><br>inceax<br>cmpBYTE PTR ?bRun@@3_NC, 0; bRun<br>jeSHORT <span class="hljs-variable">$LL2</span>@WorkThread<br><span class="hljs-variable">$LN3</span>@WorkThread:<br><br>; 12   : &#125;<br>; 13   : <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tick %d\n&quot;</span>, nTick);<br><br>pusheax<br>pushOFFSET ??_C@_08EAGMJAIH@tick?5?<span class="hljs-variable">$CFd</span>?6?<span class="hljs-variable">$AA</span>@<br>call_printf<br>addesp, 8<br><br>; 14   : <span class="hljs-built_in">return</span> 0L;<br><br>xoreax, eax<br><br>; 15   : &#125;<br></code></pre></td></tr></table></figure><p>Some attributes of volatile variable:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. The content of a volatile variable is <span class="hljs-string">&quot;unstable&quot;</span> (can change by means unknown to the compiler),<br>2. all writes to volatile data are <span class="hljs-string">&quot;observable&quot;</span> so they must be executed religiously, and<br>3. all operations on volatile data are executed <span class="hljs-keyword">in</span> the sequence <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> they appear <span class="hljs-keyword">in</span> the <span class="hljs-built_in">source</span> code.<br></code></pre></td></tr></table></figure><p>After variable is declared as volatile, everything is fine!</p><p>Are there other ways to forbid instruction reordering? Yes, <strong>compiler barriers</strong> is designed for this purpose.</p><p>1.Explicit compiler barriers.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">bool bRun = <span class="hljs-literal">false</span>;<br>DWORD WINAPI WorkThread(LPVOID param) &#123;<br>int nTick = 0;<br><span class="hljs-keyword">while</span> (!bRun) &#123;<br>MemoryBarrier();<br>++nTick;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tick %d\n&quot;</span>, nTick);<br><span class="hljs-built_in">return</span> 0L;<br>&#125;<br></code></pre></td></tr></table></figure><p>MemoryBarrier refer to <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/nf-winnt-memorybarrier">MSDN</a>.</p><p>2.Implied compiler barriers.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">bool bRun = <span class="hljs-literal">false</span>;<br>DWORD WINAPI WorkThread(LPVOID param) &#123;<br>int nTick = 0;<br><span class="hljs-keyword">while</span> (!bRun) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tick %d\n&quot;</span>, nTick);// or Sleep(5);<br>++nTick;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tick %d\n&quot;</span>, nTick);<br><span class="hljs-built_in">return</span> 0L;<br>&#125;<br></code></pre></td></tr></table></figure><p>Non-inline functions act as barriers.</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
